1)
let promiseTwo = new Promise((resolve, reject) => {
   resolve("a");
});

promiseTwo
.then((res) => {
   return res + "b";
})
.then((res) => {
   return res + "с";
})
.finally((res) => {
   return res + "!!!!!!!";
})
.catch((res) => {
   return res + "d";
})
.then((res) => {
   console.log(res); 
});

//abc

2)
function doSmth() {
   return Promise.resolve("123");
}

doSmth()
.then(function (a) {
   console.log("1", a); 
   return a;
})
.then(function (b) {
   console.log("2", b); 
   return Promise.reject("321");
})
.catch(function (err) {
   console.log("3", err); 
})
.then(function (c) {
   console.log("4", c); 
return c;
});

//1123
//2123
//3321
//4undefined

3) Напишите функцию, которая будет проходить через массив целых чисел и выводить индекс каждого элемента с задержкой в 3 секунды.
Входные данные: [10, 12, 15, 21]

arr=[10, 12, 15, 21]
function showElement(arr) {
 for (let i=0; i<arr.length; i++){
  setTimeout (() => console.log(i), 3000 * (i+1))
 }    
}

showElement(arr)

4) Прочитать про Top Level Await (можно ли использовать await вне функции async)

Top-Level Await (await верхнего уровня, «глобальный» await)  это функциональность, которая дает возможность превращения ES модулей в некое подобие асинхронных функций. Это позволяет модулям получать готовые к использованию ресурсы и блокировать модули, импортирующие их. Модули, которые импортируют ожидаемые ресурсы, смогут запускать выполнение кода только после получения ресурсов и их предварительной подготовки к использованию.

Случаи использования:

1. Динамический путь зависимости. Это позволяет модулям использовать значения среды выполнения для вычисления путей зависимостей и может быть полезным для разделения разработка/продакшн код, интернационализации, разделения кода в зависимости от среды выполнения (браузер, Node.js) и т.д.

2. Инициализация ресурсов. Это помогает модулям получать готовые к использованию ресурсы и выбрасывать исключения в случае, когда модуль не может быть использован. Такой подход может использоваться для подстраховки, как будет показано ниже.

3. Запасной вариант. «глобальный» await может использоваться для загрузки зависимости с реализацией запасного варианта.

5) Необходимо реализовать функцию fetchUrl, которая будет использоваться следующим образом.
Внутри fetchUrl можно использовать условный метод fetch, который просто возвращает
Promise с содержимым страницы или вызывает reject */
fetchUrl('https://google/com&#39;)
.then(...)
.catch(...) // сatch должен сработать только после 5 неудачных попыток
получить содержимое страницы внутри fetchUrl

const url = 'https://google/com&#39'

function fetchUrl(url) {
  return new Promise((resolve, reject) => {
    let attempts = 0;
    const makeRequest = () => {
      attempts++;
      fetch(url)
        .then(response => resolve(response))
        .catch(err => {
          if (attempts < 5) {
            makeRequest();
          } else {
            reject(new Error('Fetch failed after 5 attempts'));
          }
        });
    };
    makeRequest();
  });
}
